<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram scale="118.921">
                        <Box name="NAO BRAIN" id="7" localization="8" tooltip="NAO BRAIN V1&#x0A;XHU AISTLAB&#x0A;winxos 2015-07-23" x="237" y="53">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="nao_server" id="1" localization="8" tooltip="NAO 远程控制 服务器" x="436" y="250">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import cv2
import numpy as np
import socket
import fcntl
import struct
class MyClass(GeneratedClass):
    MAX_PACK_SIZE = 1024
    def __init__(self):
        GeneratedClass.__init__(self)
        folderName = self.behaviorAbsolutePath()
        #print(folderName)
        sys.path.append(folderName)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def send_cv_img(self,frame, addr):
        self.server.sendto("ndarray", addr)
        packSize = 0
        encode_param = [int(cv2.IMWRITE_JPEG_QUALITY), self.getParameter("zip")]  # quality
        f, buf = cv2.imencode('.jpg', frame, encode_param)
        jpg = np.array(buf).tostring()
        filesize = len(jpg)
        try:
            if len(frame.shape)==3:
                iw,ih,iz=frame.shape
                self.server.sendto("%d %d %d %d"%(filesize,iw,ih,iz), addr)
            elif len(frame.shape)==2:
                iw,ih=frame.shape
                self.server.sendto("%d %d %d"%(filesize,iw,ih), addr)
            string = ""
            for i in range(0, filesize):
                packSize = packSize + 1
                string = string + jpg[i]
                if (self.MAX_PACK_SIZE == packSize or i == filesize - 1):
                    self.server.sendto(string, addr)
                    packSize = 0
                    string = ""
        except:
            pass
        self.server.sendto("end", addr)
    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        self.server = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # DGRAM -> UDP

        ip = socket.inet_ntoa(
            fcntl.ioctl(self.server.fileno(), 0X8915, struct.pack('256s', 'eth0'[:15]))[20:24])
        self.server.bind(ip, self.getParameter("port")))
        #self.server.bind((self.getParameter("ip"), self.getParameter("port")))
        keyword=["shortrun","longrun","penalty","stiffnesson","sitdown","standup","wakeup","forward","left","right","stiffnessoff","sleep"]

        while True:
            #frame=cv2.cvtColor(frame,cv2.COLOR_RGB2BGR)
            data, addr = self.server.recvfrom(1024)
            print(data, addr)
            if data == "img":
                self.send_cv_img(self.img, addr)
            elif data in keyword or data.startswith("ball "):
                self.run(data)
            elif data == "exit":
                break

        print("exit")
        self.server.close()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
        self.server.close()
        print("server exit")

    def onInput_get_img(self,raw):
        self.img=np.fromstring(raw[1],dtype=np.uint8)
        self.img=self.img.reshape(raw[0])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="get_img" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Output name="run" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                                <Parameter name="ip" inherits_from_parent="0" content_type="3" value="192.168.0.174" default_value="192.168.0.128" custom_choice="0" tooltip="NAO IP地址" id="7" />
                                                <Parameter name="port" inherits_from_parent="0" content_type="1" value="9100" default_value="9100" min="1000" max="65535" tooltip="NAO连接端口号" id="8" />
                                                <Parameter name="zip" inherits_from_parent="0" content_type="1" value="45" default_value="30" min="5" max="100" tooltip="图像传输压缩率，越小压缩比越大。" id="9" />
                                            </Box>
                                            <Box name="nao_brain" id="2" localization="8" tooltip="" x="629" y="186">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import cv2
import numpy as np
class MyClass(GeneratedClass):
    brain_state=0
    control_data=None
    match={'idle':0,'shortrun':1,'longrun':2,'penalty':3}
    runoncekey=["stiffnesson","sitdown","standup","wakeup","forward","left","right","stiffnessoff","sleep"]
    _ball_min = np.array((90,160,80))
    _ball_max = np.array((150,210,150))
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass
    def onUnload(self):
        #put clean-up code here
        pass
    def getROI(self,tmin,tmax): #普通组合滤波,hsv 格式
        thresh=cv2.inRange(self.hsv, tmin,tmax) #过滤
        thresh=cv2.medianBlur(thresh,3) #中值滤波
        #thresh=cv2.GaussianBlur(thresh,(3,3),0) #高斯滤波
        return thresh
    def getMinCircle(self,thresh): #计算最小包裹圆
        contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE) #找轮廓，会修改原图片
        maxarea=0
        cnt=None
        for h,tcnt in enumerate(contours): #找到面积最大的轮廓
          area = cv2.contourArea(tcnt)
          if area>maxarea:
            maxarea=area
            cnt=tcnt
        (x,y),r=(0,0),0
        if cnt!=None:
          (x,y),r=cv2.minEnclosingCircle(cnt)
          (x,y),r=(int(x),int(y)),int(r)
        return (x,y),r
    def run_state(self):
        tmp=self.getROI(self._ball_min,self._ball_max)
        (x,y),r=self.getMinCircle(tmp)
        cv2.circle(self.hsv,(x,y),r,(255,255,0),1)
        if self.brain_state==self.match['shortrun']:
            iy,ix,iz=self.img.shape
            if x>0 and y>0:
                self.short_run(ix/2-x)
                cv2.putText(self.hsv,"%d,%d"%(x,y), (10,50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255))
            else:
                cv2.putText(self.hsv,"short loss", (10,50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255))
        elif self.brain_state==self.match['longrun']:
            iy,ix,iz=self.img.shape
            if x>0 and y>0:
                self.long_run(ix/2-x)
                cv2.putText(self.hsv,"%d,%d"%(x,y), (10,50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255))
            else:
                cv2.putText(self.hsv,"long loss", (10,50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,255,255))
        elif self.brain_state==self.match['penalty']:
            pass
        else:
            cv2.putText(self.hsv,"idle", (10,50), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,255,255))
            if  self.control_data in self.runoncekey:
                self.runonce(self.control_data)
                self.control_data=None

    def onInput_onStart(self,p):
        #self.onStopped() #activate the output of the box
        run_state(p)

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box
    def onInput_run_state(self,raw):
        img=np.fromstring(raw[6],dtype=np.uint8)
        self.img=img.reshape((raw[1],raw[0],3))
        self.hsv=cv2.cvtColor(self.img,cv2.COLOR_BGR2HSV)
        self.run_state()
        self.send_img([self.hsv.shape,self.hsv.tostring()])
    def onInput_change_state(self,p):
        try:
            if p in self.match:
                self.brain_state=self.match[p]
                self.control_data=None
            else:
                self.brain_state=self.match['idle']
                self.control_data=p
                pa=p.split()
                if pa[0]=="ball":
                    n=np.fromstring(pa[1],dtype=np.uint8)
                    n=n.reshape(2,3)
                    self.log(n)
                    self._ball_min=n[0]
                    self._ball_max=n[1]
                    self.brain_state=self.match['shortrun']
        except:
            self.brain_state=self.match['idle']]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="run_state" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Input name="change_state" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="output" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="6" />
                                                <Output name="send_img" type="0" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Output name="short_run" type="0" type_size="1" nature="2" inner="0" tooltip="" id="8" />
                                                <Output name="runonce" type="0" type_size="1" nature="2" inner="0" tooltip="" id="9" />
                                                <Output name="long_run" type="0" type_size="1" nature="2" inner="0" tooltip="" id="10" />
                                            </Box>
                                            <Box name="vision" id="3" localization="8" tooltip="" x="458" y="77">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)
    def reset_vision(self):
        self.cam.setParam(
            vision_definitions.kCameraSelectID, self.getParameter("camid"))
        old_id = self.cam.getSubscribers()
        for i in old_id:
            self.cam.unsubscribe(i)
        colorSpace = vision_definitions.kRGBColorSpace
        self.nameId = self.cam.subscribe("wscam", getattr(
            vision_definitions, self.getParameter("resolution")), colorSpace, 30)
    def onLoad(self):
        # put initialization code here
        self.cam = ALProxy("ALVideoDevice")
        self.reset_vision()
    def onUnload(self):
        # put clean-up code here
        pass
    def onInput_onStart(self):
        self.onStopped()  # activate the output of the box
        self.reset_vision()

    def onInput_onStop(self):
        # it is recommended to reuse the clean-up as the box is stopped
        self.onUnload()
        self.onStopped()  # activate the output of the box


    def onInput_update_img(self):
        self.img(self.cam.getImageRemote(self.nameId))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="update_img" type="1" type_size="1" nature="1" inner="0" tooltip="刷新图片" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Output name="img" type="0" type_size="1" nature="2" inner="0" tooltip="图片流&#x0A;nparray  tostring" id="6" />
                                                <Parameter name="resolution" inherits_from_parent="0" content_type="3" value="kQQVGA" default_value="kQQVGA" custom_choice="0" tooltip="" id="7">
                                                    <Choice value="kQVGA" />
                                                    <Choice value="kQQVGA" />
                                                    <Choice value="kVGA" />
                                                    <Choice value="k4VGA" />
                                                </Parameter>
                                                <Parameter name="camid" inherits_from_parent="0" content_type="1" value="1" default_value="0" min="0" max="1" tooltip="" id="8" />
                                            </Box>
                                            <Box name="short_run" id="5" localization="8" tooltip="" x="894" y="136">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy("ALMotion")
        self.motion.wakeUp()
        self.postureProxy = ALProxy("ALRobotPosture")
        self.postureProxy.applyPosture("StandInit", 0.5)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_run(self, p):
        self.log(p)
        self.motion.moveToward(self.getParameter("speed")/100.0, 0, p/100.0,[["MaxStepX", 0.06],["StepHeight", 0.015]])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="run" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="10" max="100" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Delay" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="265" y="20">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="motion" id="4" localization="8" tooltip="" x="902" y="378">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_run(self, p):
        if p=='wakeup':
            self.motion.wakeUp()
        elif p=='sleep':
            self.motion.rest()
        elif p=='forward':
            self.motion.moveToward(0.3, 0, 0)
        elif p=='left':
            self.motion.moveToward(0.2, 0, 0.2)
        elif p=='right':
            self.motion.moveToward(0.2, 0, -0.2)
        elif p=='stiffnesson':
            names = "Body"
            stiffnessLists = 1.0
            timeLists = 1.0
            self.motion.stiffnessInterpolation(names, stiffnessLists, timeLists)
        elif p=='stiffnessoff':
            names = "Body"
            stiffnessLists = 0.0
            timeLists = 1.0
            self.motion.stiffnessInterpolation(names, stiffnessLists, timeLists)
        elif p=='standup':
            self.postureProxy.goToPosture("Stand",0.5)
        elif p=='sitdown':
            self.postureProxy.goToPosture("Sit",0.5)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="run" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                            </Box>
                                            <Box name="longrun" id="6" localization="8" tooltip="" x="900" y="254">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        self.motion = ALProxy("ALMotion")
        self.motion.wakeUp()
        self.postureProxy = ALProxy("ALRobotPosture")
        self.postureProxy.applyPosture("StandInit", 0.5)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        #self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def onInput_run(self, p):
        self.log(p)
        self.motion.moveToward(self.getParameter("speed")/100.0, 0, p/120.0,[["MaxStepX", 0.05],["StepHeight", 0.015]])]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="run" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="5" />
                                                <Parameter name="speed" inherits_from_parent="0" content_type="1" value="65" default_value="100" min="10" max="100" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="4" outputowner="3" indexofoutput="6" />
                                            <Link inputowner="1" indexofinput="4" outputowner="2" indexofoutput="7" />
                                            <Link inputowner="2" indexofinput="5" outputowner="1" indexofoutput="6" />
                                            <Link inputowner="5" indexofinput="4" outputowner="2" indexofoutput="8" />
                                            <Link inputowner="14" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="4" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="4" indexofinput="4" outputowner="2" indexofoutput="9" />
                                            <Link inputowner="6" indexofinput="4" outputowner="2" indexofoutput="10" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
